---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task will clean up a workspace by deleting all the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."

        # Prevent accidental deletion of root directory
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  description: This task runs unit tests using Nose.
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to Nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        nosetests $(params.args)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  description: This task clones a Git repository.
  workspaces:
    - name: source
      description: The workspace to contain the cloned repository.
      mountPath: /workspace/source
  params:
    - name: url
      description: Git repository URL
      type: string
    - name: revision
      description: Git revision (branch, tag, commit SHA)
      type: string
      default: main
  steps:
  - name: git-clone
    image: alpine/git
    script: |
      #!/bin/sh
      set -e
      echo "Cloning repository from $(params.url) ..."
      git clone $(params.url) $(workspaces.source.path)
      cd $(workspaces.source.path)
      git checkout $(params.revision)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8-linting
spec:
  description: This task runs flake8 for Python linting.
  workspaces:
    - name: source
  steps:
    - name: lint
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install flake8
        flake8 .
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-build
spec:
  description: This task builds an image using Buildah and pushes it to a registry.
  params:
    - name: image
      description: The image to build and push.
      type: string
    - name: dockerfile
      description: Path to the Dockerfile.
      type: string
      default: "Dockerfile"
  steps:
    - name: build
      image: quay.io/buildah/stable
      securityContext:
        privileged: true
      script: |
        #!/bin/sh
        set -e
        export STORAGE_DRIVER=vfs
        echo "Building image: $(params.image) using Dockerfile: $(params.dockerfile)"

        buildah bud --tls-verify=false --file $(workspaces.source.path)/$(params.dockerfile) -t $(params.image) $(workspaces.source.path)

        echo "Pushing image to registry: $(params.image)"
        buildah push $(params.image)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: openshift-client
spec:
  description: |
    This task uses the OpenShift CLI to execute deployment commands.
  params:
    - name: image
      description: Reference of the image to deploy.
      type: string
  workspaces:
    - name: kubeconfig-dir
      optional: true
  steps:
    - name: deploy-app
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/bin/sh
        set -e
        echo "Deploying application using image: $(params.image)"

        if oc get deployment my-app; then
          oc set image deployment/my-app my-app=$(params.image)
        else
          oc create deployment my-app --image=$(params.image)
        fi

        oc expose deployment my-app --port=8080 --target-port=8000 || echo "Service already exposed."
